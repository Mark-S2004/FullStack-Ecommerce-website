before we proceed we have those 2 erorrs and
[{
	"resource": "/c:/Users/mdzhs/Downloads/ASU downlaods/New folder/mark's code 2/FullStack-Ecommerce-website/server/src/app.ts",
	"owner": "typescript",
	"code": "2613",
	"severity": 8,
	"message": "Module '\"c:/Users/mdzhs/Downloads/ASU downlaods/New folder/mark's code 2/FullStack-Ecommerce-website/server/src/exceptions/HttpException\"' has no default export. Did you mean to use 'import { HttpException } from \"c:/Users/mdzhs/Downloads/ASU downlaods/New folder/mark's code 2/FullStack-Ecommerce-website/server/src/exceptions/HttpException\"' instead?",
	"source": "ts",
	"startLineNumber": 12,
	"startColumn": 8,
	"endLineNumber": 12,
	"endColumn": 21
},{
	"resource": "/c:/Users/mdzhs/Downloads/ASU downlaods/New folder/mark's code 2/FullStack-Ecommerce-website/server/src/app.ts",
	"owner": "typescript",
	"code": "2614",
	"severity": 8,
	"message": "Module '\"@routes/index\"' has no exported member 'webhookRoute'. Did you mean to use 'import webhookRoute from \"@routes/index\"' instead?",
	"source": "ts",
	"startLineNumber": 24,
	"startColumn": 10,
	"endLineNumber": 24,
	"endColumn": 22
}]

Here is a **clear, complete list of requirements** extracted from your university project's PDF:

---

### ✅ **General Project Requirements**

* **Topic:** Online Fashion Store
* **Team:** Individual project
* **Deadline:** As specified by your instructor (not in the PDF)

---

### ✅ **Functional Requirements**

#### 1. **Authentication**

* Users must be able to:

  * Register
  * Login
  * Logout
  * Passwords must be hashed (backend)

#### 2. **User Roles**

* Two roles:

  * **Admin**
  * **Customer**
* Role-based access control is required.

#### 3. **Admin Functionalities**

* Admin must be able to:

  * View all users
  * Add, edit, delete products
  * View all orders
  * Manage discounts
  * View and manage product reviews

#### 4. **Customer Functionalities**

* Customers must be able to:

  * Browse products (filter by category, gender, etc.)
  * View product details
  * Add to cart
  * Update/remove items from cart
  * Checkout
  * View order history
  * Add product reviews

---

### ✅ **Frontend Requirements**

* Use **HTML, CSS, JavaScript**, and **Node.js framework** studied in lab.
* You **can** use other frameworks/libraries like **Bootstrap** (or Tailwind).
* The frontend must be **responsive**.
* Must support user interaction (form submissions, dynamic updates).

---

### ✅ **Backend Requirements**

* Use **Node.js** and **Express.js**
* Store data using **MongoDB**
* Follow **MVC architecture**
* Implement **RESTful APIs**
* Use **JWT** for authentication and authorization
* Use **dotenv** for environment variables
* Passwords must be **hashed**

---

### ✅ **Database Requirements**

* Use **MongoDB**
* Collections:

  * Users
  * Products
  * Orders
  * Reviews
  * (Optionally) Discounts

---

### ✅ **Security Requirements**

* Hash passwords
* Use JWT securely (for both access control and token storage)
* Protect admin routes
* Validate all inputs (basic validation in frontend, stricter in backend)

---

### ✅ **Deployment**

* Project must be hosted on a **free cloud platform**

  * Suggestions: **Render**, **Railway**, **Vercel**, or **Netlify**
* Both frontend and backend should be deployed

---

### ✅ **Submission Requirements**

* Submit:

  * Source code (client + server)
  * Working live links
  * Documentation (README + possibly a report or screenshots)

---

Would you like a checklist or Trello-style breakdown for tracking these items?


